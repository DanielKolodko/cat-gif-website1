pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'danielkolodko/cat-gif-website1-flask-app'
        DOCKER_TAG = 'latest'
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Clone the repository and specify the branch (main)
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/DanielKolodko/cat-gif-website1.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Ensure Dockerfile is in the correct directory
                    bat 'docker build -t %DOCKER_IMAGE%:%DOCKER_TAG% .'
                }
            }
        }

        stage('Test Docker Image') {
            steps {
                script {
                    // Run the container for testing
                    bat 'docker run --rm -d --name test-container -p 5000:5000 %DOCKER_IMAGE%:%DOCKER_TAG%'
                    
                    // Wait for the container to start
                    bat 'ping 127.0.0.1 -n 6 > nul
'

                    // Perform health check
                    bat '''curl -f http://localhost:5000 || (
                        echo "Health check failed" && docker logs test-container && exit /b 1
                    )'''

                    // Stop the container after testing
                    bat 'docker stop test-container'
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    withDockerRegistry([credentialsId: 'docker', url: 'https://index.docker.io/v1/']) {
                        bat 'docker push %DOCKER_IMAGE%:%DOCKER_TAG%'
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Deploy to production (replace existing container)
                    bat '''
                    docker stop prod-container || echo "Container not running"
                    docker rm prod-container || echo "Container not found"
                    docker run -d --name prod-container -p 5000:5000 %DOCKER_IMAGE%:%DOCKER_TAG%
                    '''
                }
            }
        }
    }

    post {
        always {
            // Clean up unused Docker resources
            bat 'docker container prune -f || echo "No containers to prune"'
            bat 'docker image prune -f || echo "No images to prune"'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}

