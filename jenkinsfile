pipeline {
    agent any

    environment {
        IMAGE_NAME = 'danielkolodko/cat-gif-website1-flask-app'
    }

    stages {
        stage('Declarative: Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('Clone Repository') {
            steps {
                script {
                    // Git operations happen automatically when Jenkins fetches the repository
                    echo "Repository cloned."
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image..."
                    bat "docker build -t ${env.IMAGE_NAME}:latest ."
                }
            }
        }

        stage('Test Docker Image') {
            steps {
                script {
                    echo "Running Docker container to test..."
                    bat "docker run --rm -d --name test-container -p 5000:5000 ${env.IMAGE_NAME}:latest"
                    
                    // Adding a slight delay to make sure the container is ready
                    bat 'ping 127.0.0.1 -n 20 >nul'
                    
                    // Running the PowerShell script with corrected syntax
                    powershell '''
                    try {
                        $response = Invoke-WebRequest -Uri http://localhost:5000 -UseBasicParsing
                        if ($response.StatusCode -ne 200) {
                            Write-Host "Flask app is not responding with status code 200"
                            exit 1
                        } else {
                            Write-Host "Flask app is up and running"
                        }
                    } catch {
                        Write-Host "Error while checking Flask app status: $($_)"
                        exit 1
                    }
                    '''
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "Pushing Docker image to Docker Hub..."
                    bat "docker push ${env.IMAGE_NAME}:latest"
                }
            }
        }

        stage('Deploy') {
            when {
                expression { currentBuild.result == null || currentBuild.result == 'SUCCESS' }
            }
            steps {
                script {
                    echo "Deploying the Docker container..."
                    // Deploy steps can be added here, for example, to a cloud platform or server
                }
            }
        }

        stage('Declarative: Post Actions') {
            steps {
                script {
                    echo "Cleaning up Docker resources..."
                    bat 'docker container prune -f || echo "No containers to prune"'
                    bat 'docker image prune -f || echo "No images to prune"'
                }
            }
        }
    }

    post {
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
        success {
            echo 'Pipeline succeeded.'
        }
    }
}
