pipeline {
    agent any

    environment {
        // Docker image name and tag
        DOCKER_IMAGE = 'danielkolodko/cat-gif-website1-flask-app'
        DOCKER_TAG = 'latest'  // You can also use a dynamic tag like 'git commit hash'
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Clone the GitHub repository
                git credentialsId: 'github', url: 'https://github.com/DanielKolodko/cat-gif-website1.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh 'docker build -t $DOCKER_IMAGE:$DOCKER_TAG .'
                }
            }
        }

        stage('Test Docker Image') {
            steps {
                script {
                    // Run the Docker image to test it (you can run tests inside the container here)
                    sh 'docker run --rm -d -p 5000:5000 $DOCKER_IMAGE:$DOCKER_TAG'
                    // Add any test scripts here to validate the image, e.g. API tests
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    // Push the image to Docker Hub
                    withDockerRegistry([credentialsId: 'docker', url: 'https://index.docker.io/v1/']) {
                        sh 'docker push $DOCKER_IMAGE:$DOCKER_TAG'
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Deploy the Docker container (e.g., start it in production)
                    // You might want to run the container on a remote server or in a cloud environment
                    sh 'docker run -d -p 5000:5000 $DOCKER_IMAGE:$DOCKER_TAG'
                }
            }
        }
    }

    post {
        always {
            // Clean up any Docker images or containers that were used during the process
            sh 'docker system prune -f'
        }
    }
}
