pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'danielkolodko/cat-gif-website1-flask-app'
        DOCKER_TAG = 'latest'
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Clone the repository and specify the branch (main)
                git branch: 'main', credentialsId: 'github', url: 'https://github.com/DanielKolodko/cat-gif-website1.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Ensure Dockerfile is in the correct directory
                    sh 'docker build -t $DOCKER_IMAGE:$DOCKER_TAG .'
                }
            }
        }

        stage('Test Docker Image') {
            steps {
                script {
                    // Run the container for testing
                    sh 'docker run --rm -d --name test-container -p 5000:5000 $DOCKER_IMAGE:$DOCKER_TAG'
                    
                    // Optional: Add health check or test script
                    sh 'sleep 5' // Wait for the container to start
                    sh 'curl -f http://localhost:5000 || (echo "Health check failed" && exit 1)'

                    // Stop the container after testing
                    sh 'docker stop test-container'
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    withDockerRegistry([credentialsId: 'docker', url: 'https://index.docker.io/v1/']) {
                        sh 'docker push $DOCKER_IMAGE:$DOCKER_TAG'
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Deploy to production (e.g., replace any existing container)
                    sh '''
                    docker stop prod-container || true
                    docker rm prod-container || true
                    docker run -d --name prod-container -p 5000:5000 $DOCKER_IMAGE:$DOCKER_TAG
                    '''
                }
            }
        }
    }

    post {
        always {
            // Clean up unused Docker resources
            sh 'docker system prune -f || true'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
    }
}
